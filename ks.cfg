# Kickstart file automatically generated by anaconda.

#version=DEV
install
text
cdrom
reboot --eject
lang en_US.UTF-8
keyboard us
skipx
rootpw  --iscrypted $6$JM2aZzCVfcypbj47$cxwD0WnJaJ02i9mtC8xdSddPYLxivJ/14b.MQB7ZRXIa4Wcjq7wUyvtvdTFGqbDEsXyhdeTjerRLaE5wUcerf/
authconfig --enableshadow --enablemd5
timezone Asia/Shanghai
firewall --disabled
selinux --disabled

# ignore unsupported hardware warning
unsupported_hardware

# NEVER ever place zerombr here, it breaks automated installation
%include /tmp/bootloader.ks
%include /tmp/partition.ks


# PREINSTALL SECTION
# HERE ARE COMMANDS THAT WILL BE LAUNCHED BEFORE
# INSTALLATION PROCESS ITSELF
%pre
#!/bin/sh

# hard drives
drives=""
removable_drives=""
for drv in `ls -1 /sys/block | grep "sd\|hd\|vd\|cciss"`; do
    if (grep -q 0 /sys/block/${drv}/removable); then
        drives="${drives} ${drv}"
    else
        removable_drives="${removable_drives} ${drv}"
    fi
done
default_drive=`echo ${drives} ${removable_drives} | awk '{print $1}'`

installdrive="undefined"
forceformat="no"
for I in `cat /proc/cmdline`; do case "$I" in *=*) eval $I;; esac ; done

set ${drives} ${removable_drives}
numdrives=`echo $#`

tgtdrive="${installdrive}"

function confirm_format {
  check_drive="$1"
  local confirm_format="yes"

  if [[ "$forceformat" == "yes" ]] ; then
    return 0
  fi

  if parted -s /dev/$check_drive print &>/dev/null ; then
    echo
    echo "$check_drive drive contains partition table:"
    parted -s /dev/$check_drive print
    echo
    read -t 10 -p "Are you sure you want to erase ALL data on disk $check_drive? (y/N)" confirm_format || confirm_format="y"
    if [[ "$confirm_format" == "y" ]] || [[ "$confirm_format" == "Y" ]] || [[ "$forceformat" == "yes" ]]; then
      return 0
    else
      return 1
    fi
  else
    return 0
  fi
}

format_confirmed="no"

if [ $numdrives -lt 1 ]; then
    exec < /dev/tty3 > /dev/tty3 2>&1
    chvt 3
    clear
    echo
    echo '********************************************************************'
    echo '*                            E R R O R                             *'
    echo '*                                                                  *'
    echo '*      There is no suitable media available for installation.      *'
    echo '*                Please attach a drive and try again.              *'
    echo '*                                                                  *'
    echo '********************************************************************'
    echo
    read -p "Press Enter to shut down the system: " _
    poweroff
fi

if [ ${numdrives} -gt 1 ] || [ `echo ${drives} | wc -w` -eq 0 ] ; then
    exec < /dev/tty3 > /dev/tty3 2>&1
    chvt 3
    while [ "${tgtdrive}" = "undefined" ]; do
        clear
        echo
        echo '********************************************************************************'
        echo '*                                 W A R N I N G                                *'
        echo '*                                                                              *'
        echo '*  Which of the detected hard drives do you want to be used as                 *'
        echo '*  the installation target?                                                    *'
        echo '*                                                                              *'
        echo '********************************************************************************'
        echo
        echo "Possible choices"
        echo "Persistent drives: ${drives}"
        echo "Removable drives: ${removable_drives}"
        echo
        if [ `echo ${drives} | wc -w` -eq 1 ] ; then
            read -t 5 -p "Choose hard drive: " tgtdrive || tgtdrive=$default_drive
        else
            read -t 10 -p "Choose hard drive: " tgtdrive || tgtdrive=$default_drive
        fi
        match="no"
        for drive in ${drives[@]} ${removable_drives[@]}; do
          if [[ "$drive" == "$tgtdrive" ]] && match="yes" ; then
            if confirm_format $tgtdrive ; then
              format_confirmed="yes"
              break
            else
              tgtdrive="undefined"
              read -p "You may select another disk. Press Enter to continue." _
            fi
          fi
        done
        if [[ "$match" == "no" ]]; then
          tgtdrive="undefined"
          read -p "Invalid choice. Press Enter to continue." _
        fi
    done
    clear
    chvt 1
else
    tgtdrive=`echo ${drives} | sed -e "s/^\s*//" -e "s/\s*$//"`
fi

if [ "$format_confirmed" != "yes" ] ; then
  exec < /dev/tty3 > /dev/tty3 2>&1
  chvt 3
  if ! confirm_format $tgtdrive ; then
      clear
      echo
      echo '********************************************************************'
      echo '*                            E R R O R                             *'
      echo '*                                                                  *'
      echo '*           Disk $tgtdrive contains active partition(s).           *'
      echo '*        Installation cannot continue without confirmation.        *'
      echo '*                                                                  *'
      echo '********************************************************************'
      echo
      read -p "Press Enter to restart: " _
      reboot
  fi
  chvt 1
fi

# verify tgtdrive is at least 30GB
tgtdrivesize=$(( $(cat "/sys/class/block/${tgtdrive}/size") / 2 / 1024 ))
if [ $tgtdrivesize -lt 30720 ]; then
    exec < /dev/tty3 > /dev/tty3 2>&1
    chvt 3
    clear
    echo
    echo '********************************************************************'
    echo '*                            E R R O R                             *'
    echo '*                                                                  *'
    echo '*  Your disk is under 30GB in size. Installation cannot continue.  *'
    echo '*             Restart installation with a larger disk.             *'
    echo '*                                                                  *'
    echo '********************************************************************'
    echo
    read -p "Press Enter to restart: " _
    reboot
fi

# paths in /dev have "/" instead of "!" for cciss devices
tgtdrive=$(echo $tgtdrive | sed -e 's/!/\//')

# source
if test -e /dev/disk/by-uuid/will_be_substituted_with_actual_uuid; then
    echo "harddrive --partition=UUID=will_be_substituted_with_actual_uuid --dir=/" > /tmp/source.ks
else
    echo "cdrom" > /tmp/source.ks
fi

hdparm -z /dev/${tgtdrive}

# partition

# This adds support for the p seperator required for cciss devices
if echo ${tgtdrive} | grep -q -e cciss ; then
    bootdev=${tgtdrive}p
else
    bootdev=${tgtdrive}
fi
echo > /tmp/partition.ks
echo "bootloader --location=mbr" >>/tmp/partition.ks
echo "clearpart --all --initlabel" >> /tmp/partition.ks
echo "zerombr" >> /tmp/partition.ks
echo "ignoredisk --only-use=${tgtdrive}" >> /tmp/partition.ks
echo "partition /boot --fstype="ext4" --size=200" >> /tmp/partition.ks
echo "partition swap --fstype="swap" --size=8192" >> /tmp/partition.ks
echo "partition / --fstype="ext4" --grow --size=1" >> /tmp/partition.ks

# bootloader
echo "bootloader --location=mbr --driveorder=${tgtdrive}" > /tmp/bootloader.ks

%end

%packages
@additional-devel
@base
@chinese-support
@compat-libraries
@core
@debugging
@development
@graphical-admin-tools
@java-platform
@kde-desktop
@php
@performance
@perl-runtime
@ruby-runtime
@system-management-snmp
@server-policy
@workstation-policy
@x11
libgcrypt-devel
libXinerama-devel
xorg-x11-proto-devel
startup-notification-devel
libgnomeui-devel
libbonobo-devel
libXau-devel
libXrandr-devel
popt-devel
libxslt-devel
libglade2-devel
gnutls-devel
mtools
python-dmidecode
wodim
sgpio
genisoimage
device-mapper-persistent-data
systemtap-client
python-six
jpackage-utils
perl-DBD-SQLite
httpd
net-tools
salt-master
salt-minion
%end

# POSTINSTALL SECTION
# HERE ARE COMMANDS THAT WILL BE LAUNCHED JUST AFTER
# INSTALLATION ITSELF COMPLETED
%post --log=/root/ks-post.log
#!/bin/bash

set -x


# Prepare local repository specification
rm -rf /etc/yum.repos.d/CentOS*.repo
cat  <<EOF> /etc/yum.repos.d/cdh.repo
[econe]
name = cdh
baseurl = http://127.0.0.1:9090/
gpgcheck = 0
enabled = 1
EOF

# Add local yum repo
cat  <<EOF> /etc/httpd/conf.d/cdh-repo.conf
Listen 9090
<VirtualHost *:9090>
  DocumentRoot /var/www/cdh-repo
  <Directory /ec-cloud>
    Options FollowSymLinks
    AllowOverride None
  </Directory>
  <Directory /var/www/cdh-repo>
    Options Indexes FollowSymLinks MultiViews
    AllowOverride None
    Order allow,deny
    allow from all
  </Directory>
  LogLevel warn
  CustomLog logs/cdh-repo-access.log combined
</VirtualHost>
EOF
yum clean all

# Add service start on boot
chkconfig httpd on
chkconfig salt-master on
chkconfig salt-minion on


# Change Salt-master Auto-accept minion keys
sed -i 's/#auto_accept: False/auto_accept: True/g' /etc/salt/master

# Add sysadmin authenticate
cat >> /etc/salt/master << EOF
client_acl:
  sysadmin:
    - .*
external_auth:
  pam:
    sysadmin:
      - .*
      - '@runner'
      - '@wheel'

timeout: 600
EOF


# Change Salt-master ip
sed -i 's/#master: salt/master: 127.0.0.1/g' /etc/salt/minion

# Change Controller Hostname
cat > /etc/hostname << EOF
${hostname:-seed.cdh.com}
EOF


# Change NIC name from em1 to eth0
sed -i '/quiet/s/\(.*\)/\1 biosdevname=0/' /boot/grub2/grub.conf

# Disable subscription-manager plugins
sed -i 's/^enabled.*/enabled=0/' /etc/yum/pluginconf.d/product-id.conf || :
sed -i 's/^enabled.*/enabled=0/' /etc/yum/pluginconf.d/subscription-manager.conf || :

# Disable GSSAPI in ssh server config
sed -i -e "/^\s*GSSAPICleanupCredentials yes/d" -e "/^\s*GSSAPIAuthentication yes/d" /etc/ssh/sshd_config

# Disabling splash
sed -i --follow-symlinks -e '/^\skernel/ s/rhgb//' /etc/grub2.conf
sed -i --follow-symlinks -e '/^\skernel/ s/quiet//' /etc/grub2.conf

# Change NIC name from em1 to eth0
rm -rf /etc/udev/rules.d/70-persistent-net.rules
rm -rf /etc/sysconfig/network-scripts/ifcfg-em*
%end

